// Generated by Haxe 3.4.0 (git build development @ 9dfeede)
if (typeof process !== "undefined") if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");

(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Position = function(min,max) {
	this.min = min;
	this.max = max;
};
Position.__name__ = true;
Position.prototype = {
	toString: function() {
		return "[" + this.min + ".." + this.max + ")";
	}
};
var Token = function(kind,pos) {
	this.kind = kind;
	this.pos = pos;
};
Token.__name__ = true;
Token.prototype = {
	toString: function() {
		return "" + Std.string(this.kind) + " " + Std.string(this.pos);
	}
};
var TokenKind = { __ename__ : true, __constructs__ : ["TkEof","TkUnknown","TkKeyword","TkIdent","TkBraceOpen","TkBraceClose"] };
TokenKind.TkEof = ["TkEof",0];
TokenKind.TkEof.toString = $estr;
TokenKind.TkEof.__enum__ = TokenKind;
TokenKind.TkUnknown = ["TkUnknown",1];
TokenKind.TkUnknown.toString = $estr;
TokenKind.TkUnknown.__enum__ = TokenKind;
TokenKind.TkKeyword = function(keyword) { var $x = ["TkKeyword",2,keyword]; $x.__enum__ = TokenKind; $x.toString = $estr; return $x; };
TokenKind.TkIdent = function(ident) { var $x = ["TkIdent",3,ident]; $x.__enum__ = TokenKind; $x.toString = $estr; return $x; };
TokenKind.TkBraceOpen = ["TkBraceOpen",4];
TokenKind.TkBraceOpen.toString = $estr;
TokenKind.TkBraceOpen.__enum__ = TokenKind;
TokenKind.TkBraceClose = ["TkBraceClose",5];
TokenKind.TkBraceClose.toString = $estr;
TokenKind.TkBraceClose.__enum__ = TokenKind;
var Keyword = { __ename__ : true, __constructs__ : ["KwClass"] };
Keyword.KwClass = ["KwClass",0];
Keyword.KwClass.toString = $estr;
Keyword.KwClass.__enum__ = Keyword;
var Trivia = function(kind,text,pos) {
	this.kind = kind;
	this.text = text;
	this.pos = pos;
};
Trivia.__name__ = true;
Trivia.prototype = {
	toString: function() {
		return "" + Std.string(this.kind) + " " + Std.string(this.pos);
	}
};
var TriviaKind = { __ename__ : true, __constructs__ : ["TrWhitespace","TrEndOfLine","TrSingleLineComment","TrMultiLineComment"] };
TriviaKind.TrWhitespace = ["TrWhitespace",0];
TriviaKind.TrWhitespace.toString = $estr;
TriviaKind.TrWhitespace.__enum__ = TriviaKind;
TriviaKind.TrEndOfLine = ["TrEndOfLine",1];
TriviaKind.TrEndOfLine.toString = $estr;
TriviaKind.TrEndOfLine.__enum__ = TriviaKind;
TriviaKind.TrSingleLineComment = ["TrSingleLineComment",2];
TriviaKind.TrSingleLineComment.toString = $estr;
TriviaKind.TrSingleLineComment.__enum__ = TriviaKind;
TriviaKind.TrMultiLineComment = ["TrMultiLineComment",3];
TriviaKind.TrMultiLineComment.toString = $estr;
TriviaKind.TrMultiLineComment.__enum__ = TriviaKind;
var Node = function() {
};
Node.__name__ = true;
Node.prototype = {
	toString: function() {
		return "" + Std.string(this.kind) + " " + Std.string(this.pos);
	}
};
var NodeKind = { __ename__ : true, __constructs__ : ["NClassDecl"] };
NodeKind.NClassDecl = function(classDecl) { var $x = ["NClassDecl",0,classDecl]; $x.__enum__ = NodeKind; $x.toString = $estr; return $x; };
var Scanner = function(text) {
	this.text = text;
	this.pos = 0;
	this.end = text.length;
};
Scanner.__name__ = true;
Scanner.prototype = {
	scan: function() {
		while(true) {
			this.tokenStartPos = this.pos;
			if(this.pos >= this.end) {
				var token = new Token(TokenKind.TkEof,new Position(this.tokenStartPos,this.pos));
				token.leadTrivia = this.trivia;
				token.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token;
			}
			var ch = this.text.charCodeAt(this.pos);
			switch(ch) {
			case 10:case 13:
				this.pos++;
				if(ch == 13 && this.pos < this.end && this.text.charCodeAt(this.pos) == 10) {
					this.pos++;
				}
				if(this.trivia == null) {
					this.trivia = [];
				}
				this.trivia.push(new Trivia(TriviaKind.TrEndOfLine,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
				continue;
				break;
			case 9:case 32:
				this.pos++;
				while(this.pos < this.end) {
					var ch1 = this.text.charCodeAt(this.pos);
					if(!(ch1 == 32 || ch1 == 9)) {
						break;
					}
					this.pos++;
				}
				if(this.trivia == null) {
					this.trivia = [];
				}
				this.trivia.push(new Trivia(TriviaKind.TrWhitespace,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
				continue;
				break;
			case 47:
				this.pos++;
				if(this.pos < this.end && this.text.charCodeAt(this.pos) == 42) {
					this.pos++;
					while(this.pos < this.end) {
						if(this.text.charCodeAt(this.pos) == 42 && this.pos + 1 < this.end && this.text.charCodeAt(this.pos + 1) == 47) {
							this.pos += 2;
							break;
						}
						this.pos++;
					}
					if(this.trivia == null) {
						this.trivia = [];
					}
					this.trivia.push(new Trivia(TriviaKind.TrMultiLineComment,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
					continue;
				}
				var token1 = new Token(TokenKind.TkUnknown,new Position(this.tokenStartPos,this.pos));
				token1.leadTrivia = this.trivia;
				token1.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token1;
			case 123:
				this.pos++;
				var token2 = new Token(TokenKind.TkBraceOpen,new Position(this.tokenStartPos,this.pos));
				token2.leadTrivia = this.trivia;
				token2.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token2;
			case 125:
				this.pos++;
				var token3 = new Token(TokenKind.TkBraceClose,new Position(this.tokenStartPos,this.pos));
				token3.leadTrivia = this.trivia;
				token3.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token3;
			default:
				if(ch == 95 || ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90) {
					this.pos++;
					while(this.pos < this.end) {
						var ch2 = this.text.charCodeAt(this.pos);
						if(!(ch2 >= 48 && ch2 <= 57 || (ch2 == 95 || ch2 >= 97 && ch2 <= 122 || ch2 >= 65 && ch2 <= 90))) {
							break;
						}
						this.pos++;
					}
					return this.mkIdentOrKeyword();
				} else {
					this.pos++;
					var token4 = new Token(TokenKind.TkUnknown,new Position(this.tokenStartPos,this.pos));
					token4.leadTrivia = this.trivia;
					token4.trailTrivia = this.consumeTrailTrivia();
					this.trivia = null;
					return token4;
				}
			}
		}
	}
	,consumeTrailTrivia: function() {
		var result = null;
		try {
			while(true) {
				this.tokenStartPos = this.pos;
				if(this.pos >= this.end) {
					throw "__break__";
				}
				var ch = this.text.charCodeAt(this.pos);
				switch(ch) {
				case 10:case 13:
					this.pos++;
					if(ch == 13 && this.pos < this.end && this.text.charCodeAt(this.pos) == 10) {
						this.pos++;
					}
					if(result == null) {
						result = [];
					}
					result.push(new Trivia(TriviaKind.TrEndOfLine,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
					throw "__break__";
					break;
				case 9:case 32:
					this.pos++;
					while(this.pos < this.end) {
						var ch1 = this.text.charCodeAt(this.pos);
						if(!(ch1 == 32 || ch1 == 9)) {
							break;
						}
						this.pos++;
					}
					if(result == null) {
						result = [];
					}
					result.push(new Trivia(TriviaKind.TrWhitespace,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
					continue;
					break;
				case 47:
					if(this.pos + 1 < this.end && this.text.charCodeAt(this.pos + 1) == 42) {
						this.pos += 2;
						while(this.pos < this.end) {
							if(this.text.charCodeAt(this.pos) == 42 && this.pos + 1 < this.end && this.text.charCodeAt(this.pos + 1) == 47) {
								this.pos += 2;
								break;
							}
							this.pos++;
						}
						if(result == null) {
							result = [];
						}
						result.push(new Trivia(TriviaKind.TrMultiLineComment,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
						continue;
					}
					throw "__break__";
					break;
				default:
					throw "__break__";
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return result;
	}
	,isWhiteSpace: function(ch) {
		if(ch != 32) {
			return ch == 9;
		} else {
			return true;
		}
	}
	,isNumber: function(ch) {
		if(ch >= 48) {
			return ch <= 57;
		} else {
			return false;
		}
	}
	,isIdentStart: function(ch) {
		if(!(ch == 95 || ch >= 97 && ch <= 122)) {
			if(ch >= 65) {
				return ch <= 90;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isIdentPart: function(ch) {
		if(!(ch >= 48 && ch <= 57)) {
			if(!(ch == 95 || ch >= 97 && ch <= 122)) {
				if(ch >= 65) {
					return ch <= 90;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return true;
		}
	}
	,mkIdentOrKeyword: function() {
		var ident = this.text.substring(this.tokenStartPos,this.pos);
		var token = new Token(ident == "class" ? TokenKind.TkKeyword(Keyword.KwClass) : TokenKind.TkIdent(ident),new Position(this.tokenStartPos,this.pos));
		token.leadTrivia = this.trivia;
		token.trailTrivia = this.consumeTrailTrivia();
		this.trivia = null;
		return token;
	}
	,tokenText: function() {
		return this.text.substring(this.tokenStartPos,this.pos);
	}
	,mk: function(kind) {
		var token = new Token(kind,new Position(this.tokenStartPos,this.pos));
		token.leadTrivia = this.trivia;
		token.trailTrivia = this.consumeTrailTrivia();
		this.trivia = null;
		return token;
	}
	,mkTrivia: function(kind) {
		return new Trivia(kind,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos));
	}
};
var Parser = function(text) {
	this.scanner = new Scanner(text);
};
Parser.__name__ = true;
Parser.prototype = {
	nextToken: function() {
		return this.currentToken = this.scanner.scan();
	}
	,expect: function(f) {
		var token = this.currentToken;
		if(!f(token)) {
			throw new js__$Boot_HaxeError("Unexpected " + Std.string(token));
		}
		this.nextToken();
		return token;
	}
	,parse: function() {
		this.nextToken();
		var keywordToken = this.expect(function(t) {
			if(t.kind[1] == 2) {
				return true;
			} else {
				return false;
			}
		});
		var nameToken = this.expect(function(t1) {
			if(t1.kind[1] == 3) {
				return true;
			} else {
				return false;
			}
		});
		var openBraceToken = this.expect(function(t2) {
			if(t2.kind[1] == 4) {
				return true;
			} else {
				return false;
			}
		});
		var closeBraceToken = this.expect(function(t3) {
			if(t3.kind[1] == 5) {
				return true;
			} else {
				return false;
			}
		});
		var node = new Node();
		node.kind = NodeKind.NClassDecl({ classKeyword : keywordToken, name : nameToken, openBrace : openBraceToken, closeBrace : closeBraceToken});
		node.pos = new Position(keywordToken.pos.min,closeBraceToken.pos.max);
		return node;
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var root = new Parser(js_node_Fs.readFileSync("Test.hx",{ encoding : "utf8"})).parse();
	var printToken = function(token) {
		process.stdout.write(Std.string("\t" + Std.string(token)));
		process.stdout.write("\n");
		if(token.leadTrivia != null) {
			var _g = 0;
			var _g1 = token.leadTrivia;
			while(_g < _g1.length) {
				var trivia = _g1[_g];
				++_g;
				process.stdout.write(Std.string("\t\tLEAD: " + Std.string(trivia)));
				process.stdout.write("\n");
			}
		}
		if(token.trailTrivia != null) {
			var _g2 = 0;
			var _g11 = token.trailTrivia;
			while(_g2 < _g11.length) {
				var trivia1 = _g11[_g2];
				++_g2;
				process.stdout.write(Std.string("\t\tTRAIL: " + Std.string(trivia1)));
				process.stdout.write("\n");
			}
		}
	};
	var cls = root.kind[2];
	process.stdout.write(Std.string("NClassDecl " + Std.string(root.pos)));
	process.stdout.write("\n");
	printToken(cls.classKeyword);
	printToken(cls.name);
	printToken(cls.openBrace);
	printToken(cls.closeBrace);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCharCode(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,new js_node_buffer_Buffer(data.buffer,data.byteOffset,data.byteLength),pos,len);
	}
	,writeString: function(s) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = new js_node_buffer_Buffer(data.buffer,data.byteOffset,data.byteLength);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_Fs = require("fs");
var js_node_buffer_Buffer = require("buffer").Buffer;
String.__name__ = true;
Array.__name__ = true;
Main.main();
})();
