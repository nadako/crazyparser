// Generated by Haxe 3.4.0 (git build development @ f9963e7)
if (typeof process !== "undefined") if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");

(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var decls = new Parser(js_node_Fs.readFileSync("Test.hx",{ encoding : "utf8"})).parse();
	var _g = 0;
	while(_g < decls.length) {
		var decl = decls[_g];
		++_g;
		process.stdout.write(Std.string("" + decl.kind[0] + " " + Std.string(decl.pos)));
		process.stdout.write("\n");
		var _g1 = decl.kind;
		switch(_g1[1]) {
		case 0:
			var cls = _g1[2];
			Main.printToken(cls.classKeyword);
			Main.printToken(cls.name);
			Main.printToken(cls.openBrace);
			Main.printToken(cls.closeBrace);
			break;
		case 1:
			var imp = _g1[2];
			Main.printToken(imp.importKeyword);
			Main.printToken(imp.identifier);
			Main.printToken(imp.semicolon);
			break;
		}
	}
};
Main.printToken = function(token) {
	process.stdout.write(Std.string("\t" + Std.string(token)));
	process.stdout.write("\n");
	if(token.leadTrivia != null) {
		var _g = 0;
		var _g1 = token.leadTrivia;
		while(_g < _g1.length) {
			var trivia = _g1[_g];
			++_g;
			process.stdout.write(Std.string("\t\tLEAD: " + Std.string(trivia)));
			process.stdout.write("\n");
		}
	}
	if(token.trailTrivia != null) {
		var _g2 = 0;
		var _g11 = token.trailTrivia;
		while(_g2 < _g11.length) {
			var trivia1 = _g11[_g2];
			++_g2;
			process.stdout.write(Std.string("\t\tTRAIL: " + Std.string(trivia1)));
			process.stdout.write("\n");
		}
	}
};
Math.__name__ = true;
var Node = function(kind) {
	this.kind = kind;
};
Node.__name__ = true;
Node.prototype = {
	toString: function() {
		return "" + Std.string(this.kind) + " " + Std.string(this.pos);
	}
	,__class__: Node
};
var NodeKind = { __ename__ : true, __constructs__ : ["NClassDecl","NImportDecl"] };
NodeKind.NClassDecl = function(classDecl) { var $x = ["NClassDecl",0,classDecl]; $x.__enum__ = NodeKind; $x.toString = $estr; return $x; };
NodeKind.NImportDecl = function(importDecl) { var $x = ["NImportDecl",1,importDecl]; $x.__enum__ = NodeKind; $x.toString = $estr; return $x; };
var Parser = function(text) {
	this.scanner = new Scanner(text);
};
Parser.__name__ = true;
Parser.prototype = {
	nextToken: function() {
		return this.currentToken = this.scanner.scan();
	}
	,expect: function(f) {
		var token = this.currentToken;
		if(!f(token)) {
			throw new js__$Boot_HaxeError(new UnexpectedToken(token));
		}
		this.nextToken();
		return token;
	}
	,expectToken: function(kind) {
		return this.expect(function(t) {
			return t.kind == kind;
		});
	}
	,expectKeyword: function(kw) {
		return this.expect(function(t) {
			var _g = t.kind;
			if(_g[1] == 2) {
				if(_g[2] == kw) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		});
	}
	,parseList: function(parseElement) {
		var result = [];
		while(this.currentToken.kind != TokenKind.TkEof) try {
			result.push(parseElement());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,UnexpectedToken) ) {
				console.log(e.token);
				break;
			} else throw(e);
		}
		return result;
	}
	,parse: function() {
		this.nextToken();
		return this.parseList($bind(this,this.parseModuleDecl));
	}
	,parseClass: function() {
		var keywordToken = this.expectKeyword(Keyword.KwClass);
		var nameToken = this.expect(function(t) {
			if(t.kind[1] == 3) {
				return true;
			} else {
				return false;
			}
		});
		var openBraceToken = this.expectToken(TokenKind.TkBraceOpen);
		var closeBraceToken = this.expectToken(TokenKind.TkBraceClose);
		var node = new Node(NodeKind.NClassDecl({ classKeyword : keywordToken, name : nameToken, openBrace : openBraceToken, closeBrace : closeBraceToken}));
		node.pos = new Position(keywordToken.pos.min,closeBraceToken.pos.max);
		return node;
	}
	,parseImport: function() {
		var importToken = this.expectKeyword(Keyword.KwImport);
		var nameToken = this.expect(function(t) {
			if(t.kind[1] == 3) {
				return true;
			} else {
				return false;
			}
		});
		var semicolonToken = this.expectToken(TokenKind.TkSemicolon);
		var node = new Node(NodeKind.NImportDecl({ importKeyword : importToken, identifier : nameToken, semicolon : semicolonToken}));
		node.pos = new Position(importToken.pos.min,semicolonToken.pos.max);
		return node;
	}
	,parseModuleDecl: function() {
		var _g = this.currentToken.kind;
		if(_g[1] == 2) {
			switch(_g[2][1]) {
			case 0:
				return this.parseClass();
			case 6:
				return this.parseImport();
			default:
				throw new js__$Boot_HaxeError(new UnexpectedToken(this.currentToken));
			}
		} else {
			throw new js__$Boot_HaxeError(new UnexpectedToken(this.currentToken));
		}
	}
	,__class__: Parser
};
var UnexpectedToken = function(token) {
	this.token = token;
};
UnexpectedToken.__name__ = true;
UnexpectedToken.prototype = {
	__class__: UnexpectedToken
};
var Position = function(min,max) {
	this.min = min;
	this.max = max;
};
Position.__name__ = true;
Position.prototype = {
	toString: function() {
		return "[" + this.min + ".." + this.max + ")";
	}
	,__class__: Position
};
var Scanner = function(text) {
	this.text = text;
	this.pos = 0;
	this.end = text.length;
};
Scanner.__name__ = true;
Scanner.prototype = {
	scan: function() {
		while(true) {
			this.tokenStartPos = this.pos;
			if(this.pos >= this.end) {
				var token = new Token(TokenKind.TkEof,new Position(this.tokenStartPos,this.pos));
				token.leadTrivia = this.trivia;
				token.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token;
			}
			var ch = this.text.charCodeAt(this.pos);
			switch(ch) {
			case 10:case 13:
				this.pos++;
				if(ch == 13 && this.pos < this.end && this.text.charCodeAt(this.pos) == 10) {
					this.pos++;
				}
				if(this.trivia == null) {
					this.trivia = [];
				}
				this.trivia.push(new Trivia(TriviaKind.TrEndOfLine,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
				continue;
				break;
			case 9:case 32:
				this.pos++;
				while(this.pos < this.end) {
					var ch1 = this.text.charCodeAt(this.pos);
					if(!(ch1 == 32 || ch1 == 9)) {
						break;
					}
					this.pos++;
				}
				if(this.trivia == null) {
					this.trivia = [];
				}
				this.trivia.push(new Trivia(TriviaKind.TrWhitespace,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
				continue;
				break;
			case 34:
				this.pos++;
				var token1 = new Token(TokenKind.TkString(this.scanString()),new Position(this.tokenStartPos,this.pos));
				token1.leadTrivia = this.trivia;
				token1.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token1;
			case 40:
				this.pos++;
				var token2 = new Token(TokenKind.TkParenOpen,new Position(this.tokenStartPos,this.pos));
				token2.leadTrivia = this.trivia;
				token2.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token2;
			case 41:
				this.pos++;
				var token3 = new Token(TokenKind.TkParenClose,new Position(this.tokenStartPos,this.pos));
				token3.leadTrivia = this.trivia;
				token3.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token3;
			case 42:
				this.pos++;
				var token4 = new Token(TokenKind.TkAsterisk,new Position(this.tokenStartPos,this.pos));
				token4.leadTrivia = this.trivia;
				token4.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token4;
			case 43:
				this.pos++;
				var token5 = new Token(TokenKind.TkPlus,new Position(this.tokenStartPos,this.pos));
				token5.leadTrivia = this.trivia;
				token5.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token5;
			case 44:
				this.pos++;
				var token6 = new Token(TokenKind.TkComma,new Position(this.tokenStartPos,this.pos));
				token6.leadTrivia = this.trivia;
				token6.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token6;
			case 45:
				this.pos++;
				var token7 = new Token(TokenKind.TkMinus,new Position(this.tokenStartPos,this.pos));
				token7.leadTrivia = this.trivia;
				token7.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token7;
			case 46:
				this.pos++;
				var token8 = new Token(TokenKind.TkDot,new Position(this.tokenStartPos,this.pos));
				token8.leadTrivia = this.trivia;
				token8.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token8;
			case 47:
				this.pos++;
				if(this.pos < this.end) {
					switch(this.text.charCodeAt(this.pos)) {
					case 42:
						this.pos++;
						while(this.pos < this.end) {
							if(this.text.charCodeAt(this.pos) == 42 && this.pos + 1 < this.end && this.text.charCodeAt(this.pos + 1) == 47) {
								this.pos += 2;
								break;
							}
							this.pos++;
						}
						if(this.trivia == null) {
							this.trivia = [];
						}
						this.trivia.push(new Trivia(TriviaKind.TrMultiLineComment,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
						continue;
						break;
					case 47:
						this.pos++;
						while(this.pos < this.end) {
							if(this.text.charCodeAt(this.pos) == 13 || this.text.charCodeAt(this.pos) == 10) {
								break;
							}
							this.pos++;
						}
						if(this.trivia == null) {
							this.trivia = [];
						}
						this.trivia.push(new Trivia(TriviaKind.TrSingleLineComment,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
						continue;
						break;
					default:
					}
				}
				var token9 = new Token(TokenKind.TkSlash,new Position(this.tokenStartPos,this.pos));
				token9.leadTrivia = this.trivia;
				token9.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token9;
			case 48:
				this.pos++;
				var token10 = new Token(TokenKind.TkInteger("0"),new Position(this.tokenStartPos,this.pos));
				token10.leadTrivia = this.trivia;
				token10.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token10;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				this.pos++;
				while(this.pos < this.end) {
					var ch2 = this.text.charCodeAt(ch);
					if(!(ch2 >= 48 && ch2 <= 57)) {
						break;
					}
					this.pos++;
				}
				var token11 = new Token(TokenKind.TkInteger(this.text.substring(this.tokenStartPos,this.pos)),new Position(this.tokenStartPos,this.pos));
				token11.leadTrivia = this.trivia;
				token11.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token11;
			case 58:
				this.pos++;
				var token12 = new Token(TokenKind.TkColon,new Position(this.tokenStartPos,this.pos));
				token12.leadTrivia = this.trivia;
				token12.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token12;
			case 59:
				this.pos++;
				var token13 = new Token(TokenKind.TkSemicolon,new Position(this.tokenStartPos,this.pos));
				token13.leadTrivia = this.trivia;
				token13.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token13;
			case 60:
				this.pos++;
				var token14 = new Token(TokenKind.TkLt,new Position(this.tokenStartPos,this.pos));
				token14.leadTrivia = this.trivia;
				token14.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token14;
			case 61:
				this.pos++;
				var token15 = new Token(TokenKind.TkEquals,new Position(this.tokenStartPos,this.pos));
				token15.leadTrivia = this.trivia;
				token15.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token15;
			case 62:
				this.pos++;
				var token16 = new Token(TokenKind.TkGt,new Position(this.tokenStartPos,this.pos));
				token16.leadTrivia = this.trivia;
				token16.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token16;
			case 63:
				this.pos++;
				var token17 = new Token(TokenKind.TkQuestion,new Position(this.tokenStartPos,this.pos));
				token17.leadTrivia = this.trivia;
				token17.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token17;
			case 123:
				this.pos++;
				var token18 = new Token(TokenKind.TkBraceOpen,new Position(this.tokenStartPos,this.pos));
				token18.leadTrivia = this.trivia;
				token18.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token18;
			case 125:
				this.pos++;
				var token19 = new Token(TokenKind.TkBraceClose,new Position(this.tokenStartPos,this.pos));
				token19.leadTrivia = this.trivia;
				token19.trailTrivia = this.consumeTrailTrivia();
				this.trivia = null;
				return token19;
			default:
				if(ch == 95 || ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90) {
					this.pos++;
					while(this.pos < this.end) {
						var ch3 = this.text.charCodeAt(this.pos);
						if(!(ch3 >= 48 && ch3 <= 57 || (ch3 == 95 || ch3 >= 97 && ch3 <= 122 || ch3 >= 65 && ch3 <= 90))) {
							break;
						}
						this.pos++;
					}
					return this.mkIdentOrKeyword();
				} else {
					this.pos++;
					console.log("Unexpected character: " + String.fromCharCode(ch));
					var token20 = new Token(TokenKind.TkUnknown,new Position(this.tokenStartPos,this.pos));
					token20.leadTrivia = this.trivia;
					token20.trailTrivia = this.consumeTrailTrivia();
					this.trivia = null;
					return token20;
				}
			}
		}
	}
	,scanString: function() {
		var result = "";
		var start = this.pos;
		while(true) {
			if(this.pos >= this.end) {
				result += this.text.substring(start,this.pos);
				console.log("UNTERMINATED STRING");
				break;
			}
			var ch = this.text.charCodeAt(this.pos);
			if(ch == 34) {
				result += this.text.substring(start,this.pos);
				this.pos++;
				break;
			} else if(ch == 92) {
				result += this.text.substring(start,this.pos);
				this.pos++;
				result += this.scanEscapeSequence();
				start = this.pos;
			} else {
				this.pos++;
			}
		}
		return result;
	}
	,scanEscapeSequence: function() {
		if(this.pos >= this.end) {
			console.log("UNTERMINATED ESCAPE SEQUENCE");
			return "";
		}
		var ch = this.text.charCodeAt(this.pos);
		this.pos++;
		switch(ch) {
		case 34:
			return "\"";
		case 110:
			return "\n";
		case 114:
			return "\r";
		case 116:
			return "\t";
		default:
			console.log("INVALID ESCAPE SEQUENCE");
			return "";
		}
	}
	,consumeTrailTrivia: function() {
		var result = null;
		try {
			while(true) {
				this.tokenStartPos = this.pos;
				if(this.pos >= this.end) {
					throw "__break__";
				}
				var ch = this.text.charCodeAt(this.pos);
				switch(ch) {
				case 10:case 13:
					this.pos++;
					if(ch == 13 && this.pos < this.end && this.text.charCodeAt(this.pos) == 10) {
						this.pos++;
					}
					if(result == null) {
						result = [];
					}
					result.push(new Trivia(TriviaKind.TrEndOfLine,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
					throw "__break__";
					break;
				case 9:case 32:
					this.pos++;
					while(this.pos < this.end) {
						var ch1 = this.text.charCodeAt(this.pos);
						if(!(ch1 == 32 || ch1 == 9)) {
							break;
						}
						this.pos++;
					}
					if(result == null) {
						result = [];
					}
					result.push(new Trivia(TriviaKind.TrWhitespace,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
					continue;
					break;
				case 47:
					if(this.pos + 1 < this.end) {
						switch(this.text.charCodeAt(this.pos + 1)) {
						case 42:
							this.pos += 2;
							while(this.pos < this.end) {
								if(this.text.charCodeAt(this.pos) == 42 && this.pos + 1 < this.end && this.text.charCodeAt(this.pos + 1) == 47) {
									this.pos += 2;
									break;
								}
								this.pos++;
							}
							if(result == null) {
								result = [];
							}
							result.push(new Trivia(TriviaKind.TrMultiLineComment,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
							continue;
							break;
						case 47:
							this.pos += 2;
							while(this.pos < this.end) {
								if(this.text.charCodeAt(this.pos) == 13 || this.text.charCodeAt(this.pos) == 10) {
									break;
								}
								this.pos++;
							}
							if(result == null) {
								result = [];
							}
							result.push(new Trivia(TriviaKind.TrSingleLineComment,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos)));
							continue;
							break;
						default:
						}
					}
					throw "__break__";
					break;
				default:
					throw "__break__";
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return result;
	}
	,isWhiteSpace: function(ch) {
		if(ch != 32) {
			return ch == 9;
		} else {
			return true;
		}
	}
	,isNumber: function(ch) {
		if(ch >= 48) {
			return ch <= 57;
		} else {
			return false;
		}
	}
	,isIdentStart: function(ch) {
		if(!(ch == 95 || ch >= 97 && ch <= 122)) {
			if(ch >= 65) {
				return ch <= 90;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isIdentPart: function(ch) {
		if(!(ch >= 48 && ch <= 57)) {
			if(!(ch == 95 || ch >= 97 && ch <= 122)) {
				if(ch >= 65) {
					return ch <= 90;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return true;
		}
	}
	,mkIdentOrKeyword: function() {
		var ident = this.text.substring(this.tokenStartPos,this.pos);
		var kind;
		switch(ident) {
		case "abstract":
			kind = TokenKind.TkKeyword(Keyword.KwAbstract);
			break;
		case "class":
			kind = TokenKind.TkKeyword(Keyword.KwClass);
			break;
		case "function":
			kind = TokenKind.TkKeyword(Keyword.KwFunction);
			break;
		case "import":
			kind = TokenKind.TkKeyword(Keyword.KwImport);
			break;
		case "interface":
			kind = TokenKind.TkKeyword(Keyword.KwInterface);
			break;
		case "typedef":
			kind = TokenKind.TkKeyword(Keyword.KwTypedef);
			break;
		case "using":
			kind = TokenKind.TkKeyword(Keyword.KwUsing);
			break;
		case "var":
			kind = TokenKind.TkKeyword(Keyword.KwVar);
			break;
		default:
			kind = TokenKind.TkIdent(ident);
		}
		var token = new Token(kind,new Position(this.tokenStartPos,this.pos));
		token.leadTrivia = this.trivia;
		token.trailTrivia = this.consumeTrailTrivia();
		this.trivia = null;
		return token;
	}
	,tokenText: function() {
		return this.text.substring(this.tokenStartPos,this.pos);
	}
	,mk: function(kind) {
		var token = new Token(kind,new Position(this.tokenStartPos,this.pos));
		token.leadTrivia = this.trivia;
		token.trailTrivia = this.consumeTrailTrivia();
		this.trivia = null;
		return token;
	}
	,mkTrivia: function(kind) {
		return new Trivia(kind,this.text.substring(this.tokenStartPos,this.pos),new Position(this.tokenStartPos,this.pos));
	}
	,__class__: Scanner
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCharCode(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,new js_node_buffer_Buffer(data.buffer,data.byteOffset,data.byteLength),pos,len);
	}
	,writeString: function(s) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = new js_node_buffer_Buffer(data.buffer,data.byteOffset,data.byteLength);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var Token = function(kind,pos) {
	this.kind = kind;
	this.pos = pos;
};
Token.__name__ = true;
Token.prototype = {
	toString: function() {
		return "" + Std.string(this.kind) + " " + Std.string(this.pos);
	}
	,__class__: Token
};
var TokenKind = { __ename__ : true, __constructs__ : ["TkEof","TkUnknown","TkKeyword","TkIdent","TkParenOpen","TkParenClose","TkBraceOpen","TkBraceClose","TkColon","TkSemicolon","TkDot","TkComma","TkLt","TkGt","TkEquals","TkPlus","TkMinus","TkAsterisk","TkSlash","TkQuestion","TkInteger","TkString"] };
TokenKind.TkEof = ["TkEof",0];
TokenKind.TkEof.toString = $estr;
TokenKind.TkEof.__enum__ = TokenKind;
TokenKind.TkUnknown = ["TkUnknown",1];
TokenKind.TkUnknown.toString = $estr;
TokenKind.TkUnknown.__enum__ = TokenKind;
TokenKind.TkKeyword = function(keyword) { var $x = ["TkKeyword",2,keyword]; $x.__enum__ = TokenKind; $x.toString = $estr; return $x; };
TokenKind.TkIdent = function(ident) { var $x = ["TkIdent",3,ident]; $x.__enum__ = TokenKind; $x.toString = $estr; return $x; };
TokenKind.TkParenOpen = ["TkParenOpen",4];
TokenKind.TkParenOpen.toString = $estr;
TokenKind.TkParenOpen.__enum__ = TokenKind;
TokenKind.TkParenClose = ["TkParenClose",5];
TokenKind.TkParenClose.toString = $estr;
TokenKind.TkParenClose.__enum__ = TokenKind;
TokenKind.TkBraceOpen = ["TkBraceOpen",6];
TokenKind.TkBraceOpen.toString = $estr;
TokenKind.TkBraceOpen.__enum__ = TokenKind;
TokenKind.TkBraceClose = ["TkBraceClose",7];
TokenKind.TkBraceClose.toString = $estr;
TokenKind.TkBraceClose.__enum__ = TokenKind;
TokenKind.TkColon = ["TkColon",8];
TokenKind.TkColon.toString = $estr;
TokenKind.TkColon.__enum__ = TokenKind;
TokenKind.TkSemicolon = ["TkSemicolon",9];
TokenKind.TkSemicolon.toString = $estr;
TokenKind.TkSemicolon.__enum__ = TokenKind;
TokenKind.TkDot = ["TkDot",10];
TokenKind.TkDot.toString = $estr;
TokenKind.TkDot.__enum__ = TokenKind;
TokenKind.TkComma = ["TkComma",11];
TokenKind.TkComma.toString = $estr;
TokenKind.TkComma.__enum__ = TokenKind;
TokenKind.TkLt = ["TkLt",12];
TokenKind.TkLt.toString = $estr;
TokenKind.TkLt.__enum__ = TokenKind;
TokenKind.TkGt = ["TkGt",13];
TokenKind.TkGt.toString = $estr;
TokenKind.TkGt.__enum__ = TokenKind;
TokenKind.TkEquals = ["TkEquals",14];
TokenKind.TkEquals.toString = $estr;
TokenKind.TkEquals.__enum__ = TokenKind;
TokenKind.TkPlus = ["TkPlus",15];
TokenKind.TkPlus.toString = $estr;
TokenKind.TkPlus.__enum__ = TokenKind;
TokenKind.TkMinus = ["TkMinus",16];
TokenKind.TkMinus.toString = $estr;
TokenKind.TkMinus.__enum__ = TokenKind;
TokenKind.TkAsterisk = ["TkAsterisk",17];
TokenKind.TkAsterisk.toString = $estr;
TokenKind.TkAsterisk.__enum__ = TokenKind;
TokenKind.TkSlash = ["TkSlash",18];
TokenKind.TkSlash.toString = $estr;
TokenKind.TkSlash.__enum__ = TokenKind;
TokenKind.TkQuestion = ["TkQuestion",19];
TokenKind.TkQuestion.toString = $estr;
TokenKind.TkQuestion.__enum__ = TokenKind;
TokenKind.TkInteger = function(s) { var $x = ["TkInteger",20,s]; $x.__enum__ = TokenKind; $x.toString = $estr; return $x; };
TokenKind.TkString = function(s) { var $x = ["TkString",21,s]; $x.__enum__ = TokenKind; $x.toString = $estr; return $x; };
var Keyword = { __ename__ : true, __constructs__ : ["KwClass","KwInterface","KwAbstract","KwTypedef","KwFunction","KwVar","KwImport","KwUsing"] };
Keyword.KwClass = ["KwClass",0];
Keyword.KwClass.toString = $estr;
Keyword.KwClass.__enum__ = Keyword;
Keyword.KwInterface = ["KwInterface",1];
Keyword.KwInterface.toString = $estr;
Keyword.KwInterface.__enum__ = Keyword;
Keyword.KwAbstract = ["KwAbstract",2];
Keyword.KwAbstract.toString = $estr;
Keyword.KwAbstract.__enum__ = Keyword;
Keyword.KwTypedef = ["KwTypedef",3];
Keyword.KwTypedef.toString = $estr;
Keyword.KwTypedef.__enum__ = Keyword;
Keyword.KwFunction = ["KwFunction",4];
Keyword.KwFunction.toString = $estr;
Keyword.KwFunction.__enum__ = Keyword;
Keyword.KwVar = ["KwVar",5];
Keyword.KwVar.toString = $estr;
Keyword.KwVar.__enum__ = Keyword;
Keyword.KwImport = ["KwImport",6];
Keyword.KwImport.toString = $estr;
Keyword.KwImport.__enum__ = Keyword;
Keyword.KwUsing = ["KwUsing",7];
Keyword.KwUsing.toString = $estr;
Keyword.KwUsing.__enum__ = Keyword;
var Trivia = function(kind,text,pos) {
	this.kind = kind;
	this.text = text;
	this.pos = pos;
};
Trivia.__name__ = true;
Trivia.prototype = {
	toString: function() {
		return "" + Std.string(this.kind) + " " + Std.string(this.pos);
	}
	,__class__: Trivia
};
var TriviaKind = { __ename__ : true, __constructs__ : ["TrWhitespace","TrEndOfLine","TrSingleLineComment","TrMultiLineComment"] };
TriviaKind.TrWhitespace = ["TrWhitespace",0];
TriviaKind.TrWhitespace.toString = $estr;
TriviaKind.TrWhitespace.__enum__ = TriviaKind;
TriviaKind.TrEndOfLine = ["TrEndOfLine",1];
TriviaKind.TrEndOfLine.toString = $estr;
TriviaKind.TrEndOfLine.__enum__ = TriviaKind;
TriviaKind.TrSingleLineComment = ["TrSingleLineComment",2];
TriviaKind.TrSingleLineComment.toString = $estr;
TriviaKind.TrSingleLineComment.__enum__ = TriviaKind;
TriviaKind.TrMultiLineComment = ["TrMultiLineComment",3];
TriviaKind.TrMultiLineComment.toString = $estr;
TriviaKind.TrMultiLineComment.__enum__ = TriviaKind;
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_buffer_Buffer = require("buffer").Buffer;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
