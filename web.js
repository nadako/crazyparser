// Generated by Haxe 3.4.0
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
Math.__name__ = true;
var Position = function(start,end) {
	this.start = start;
	this.end = end;
};
Position.__name__ = true;
Position.prototype = {
	toString: function() {
		return "[" + this.start + ".." + this.end + ")";
	}
};
var Scanner = function(input) {
	this.text = input;
	this.pos = 0;
	this.end = input.length;
};
Scanner.__name__ = true;
Scanner.prototype = {
	scan: function() {
		while(true) {
			this.tokenStart = this.pos;
			if(this.pos >= this.end) {
				return this.mk(TokenKind.TkEof);
			}
			var ch = this.text.charCodeAt(this.pos);
			switch(ch) {
			case 10:case 13:
				var t = this.scanEol(ch);
				if(this.trivia == null) {
					this.trivia = [];
				}
				this.trivia.push(t);
				continue;
				break;
			case 9:case 32:
				var t1 = this.scanWhitespace();
				if(this.trivia == null) {
					this.trivia = [];
				}
				this.trivia.push(t1);
				continue;
				break;
			case 33:
				this.pos++;
				if(this.pos < this.end) {
					var _g = this.text.charCodeAt(this.pos);
					if(_g == 61) {
						this.pos++;
						return this.mk(TokenKind.TkExcEquals);
					}
				}
				return this.mk(TokenKind.TkExc);
			case 34:case 39:
				return this.mk(TokenKind.TkString(this.scanString(ch)));
			case 35:
				var directive = this.scanDirective();
				if(directive == null) {
					return this.mk(TokenKind.TkUnknown);
				}
				var t2 = this.processDirective(directive);
				if(this.trivia == null) {
					this.trivia = [];
				}
				this.trivia.push(t2);
				continue;
				break;
			case 37:
				this.pos++;
				if(this.pos < this.end) {
					var _g1 = this.text.charCodeAt(this.pos);
					if(_g1 == 61) {
						this.pos++;
						return this.mk(TokenKind.TkPercentEquals);
					}
				}
				return this.mk(TokenKind.TkPercent);
			case 38:
				this.pos++;
				if(this.pos < this.end) {
					var _g2 = this.text.charCodeAt(this.pos);
					switch(_g2) {
					case 38:
						this.pos++;
						if(this.pos < this.end && this.text.charCodeAt(this.pos) == 61) {
							this.pos++;
							return this.mk(TokenKind.TkAmpAmpEquals);
						}
						return this.mk(TokenKind.TkAmpAmp);
					case 61:
						this.pos++;
						return this.mk(TokenKind.TkAmpEquals);
					default:
					}
				}
				return this.mk(TokenKind.TkAmp);
			case 40:
				this.pos++;
				return this.mk(TokenKind.TkParenOpen);
			case 41:
				this.pos++;
				return this.mk(TokenKind.TkParenClose);
			case 42:
				this.pos++;
				if(this.pos < this.end) {
					var _g3 = this.text.charCodeAt(this.pos);
					if(_g3 == 61) {
						this.pos++;
						return this.mk(TokenKind.TkAsteriskEquals);
					}
				}
				return this.mk(TokenKind.TkAsterisk);
			case 43:
				this.pos++;
				if(this.pos < this.end) {
					var _g4 = this.text.charCodeAt(this.pos);
					switch(_g4) {
					case 43:
						this.pos++;
						return this.mk(TokenKind.TkPlusPlus);
					case 61:
						this.pos++;
						return this.mk(TokenKind.TkPlusEquals);
					default:
					}
				}
				return this.mk(TokenKind.TkPlus);
			case 44:
				this.pos++;
				return this.mk(TokenKind.TkComma);
			case 45:
				this.pos++;
				if(this.pos < this.end) {
					var _g5 = this.text.charCodeAt(this.pos);
					switch(_g5) {
					case 45:
						this.pos++;
						return this.mk(TokenKind.TkMinusMinus);
					case 61:
						this.pos++;
						return this.mk(TokenKind.TkMinusEquals);
					case 62:
						this.pos++;
						return this.mk(TokenKind.TkMinusGt);
					default:
					}
				}
				return this.mk(TokenKind.TkMinus);
			case 46:
				this.pos++;
				if(this.pos + 1 < this.end && this.text.charCodeAt(this.pos) == 46 && this.text.charCodeAt(this.pos + 1) == 46) {
					this.pos += 2;
					return this.mk(TokenKind.TkDotDotDot);
				}
				return this.mk(TokenKind.TkDot);
			case 47:
				this.pos++;
				if(this.pos < this.end) {
					var _g6 = this.text.charCodeAt(this.pos);
					switch(_g6) {
					case 42:
						var t3 = this.scanBlockComment();
						if(this.trivia == null) {
							this.trivia = [];
						}
						this.trivia.push(t3);
						continue;
						break;
					case 47:
						var t4 = this.scanLineComment();
						if(this.trivia == null) {
							this.trivia = [];
						}
						this.trivia.push(t4);
						continue;
						break;
					case 61:
						this.pos++;
						return this.mk(TokenKind.TkSlashEquals);
					default:
					}
				}
				return this.mk(TokenKind.TkSlash);
			case 48:
				this.pos++;
				return this.mk(TokenKind.TkInt("0"));
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				return this.mk(TokenKind.TkInt(this.scanInteger()));
			case 58:
				this.pos++;
				return this.mk(TokenKind.TkColon);
			case 59:
				this.pos++;
				return this.mk(TokenKind.TkSemicolon);
			case 60:
				this.pos++;
				if(this.pos < this.end) {
					var _g7 = this.text.charCodeAt(this.pos);
					switch(_g7) {
					case 60:
						this.pos++;
						return this.mk(TokenKind.TkLtLt);
					case 61:
						this.pos++;
						return this.mk(TokenKind.TkLtEquals);
					default:
					}
				}
				return this.mk(TokenKind.TkLt);
			case 61:
				this.pos++;
				if(this.pos < this.end) {
					var _g8 = this.text.charCodeAt(this.pos);
					switch(_g8) {
					case 61:
						this.pos++;
						return this.mk(TokenKind.TkEqualsEquals);
					case 62:
						this.pos++;
						return this.mk(TokenKind.TkEqualsGt);
					default:
					}
				}
				return this.mk(TokenKind.TkEquals);
			case 62:
				this.pos++;
				if(this.pos < this.end) {
					var _g9 = this.text.charCodeAt(this.pos);
					switch(_g9) {
					case 61:
						this.pos++;
						return this.mk(TokenKind.TkGtEquals);
					case 62:
						this.pos++;
						if(this.pos < this.end) {
							var _g10 = this.text.charCodeAt(this.pos);
							switch(_g10) {
							case 61:
								this.pos++;
								return this.mk(TokenKind.TkGtGtEquals);
							case 62:
								this.pos++;
								if(this.pos < this.end && this.text.charCodeAt(this.pos) == 61) {
									this.pos++;
									return this.mk(TokenKind.TkGtGtGtEquals);
								}
								return this.mk(TokenKind.TkGtGtGt);
							default:
							}
						}
						return this.mk(TokenKind.TkGtGt);
					default:
					}
				}
				return this.mk(TokenKind.TkGt);
			case 91:
				this.pos++;
				return this.mk(TokenKind.TkBracketOpen);
			case 93:
				this.pos++;
				return this.mk(TokenKind.TkBracketClose);
			case 94:
				this.pos++;
				if(this.pos < this.end) {
					var _g11 = this.text.charCodeAt(this.pos);
					if(_g11 == 61) {
						this.pos++;
						return this.mk(TokenKind.TkCaretEquals);
					}
				}
				return this.mk(TokenKind.TkCaret);
			case 123:
				this.pos++;
				return this.mk(TokenKind.TkBraceOpen);
			case 124:
				this.pos++;
				if(this.pos < this.end) {
					var _g12 = this.text.charCodeAt(this.pos);
					switch(_g12) {
					case 61:
						this.pos++;
						return this.mk(TokenKind.TkBarEquals);
					case 124:
						this.pos++;
						if(this.pos < this.end && this.text.charCodeAt(this.pos) == 61) {
							this.pos++;
							return this.mk(TokenKind.TkBarBarEquals);
						}
						return this.mk(TokenKind.TkBarBar);
					default:
					}
				}
				return this.mk(TokenKind.TkBar);
			case 125:
				this.pos++;
				return this.mk(TokenKind.TkBraceClose);
			case 126:
				this.pos++;
				return this.mk(TokenKind.TkTilde);
			default:
				if(ch == 95 || ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90) {
					return this.mk(TokenKind.TkIdent(this.scanIdent()));
				} else {
					var text = "Unknown token: " + this.text.charAt(this.pos);
					var start = null;
					if(start == null) {
						start = this.tokenStart;
					}
					this.handleError(text,new Position(start,this.pos));
					this.pos++;
					return this.mk(TokenKind.TkUnknown);
				}
			}
		}
	}
	,handleError: function(text,pos) {
		console.log("" + text + " " + Std.string(pos));
	}
	,addError: function(text,start) {
		if(start == null) {
			start = this.tokenStart;
		}
		this.handleError(text,new Position(start,this.pos));
	}
	,pushTrivia: function(t) {
		if(this.trivia == null) {
			this.trivia = [];
		}
		this.trivia.push(t);
	}
	,scanIdent: function() {
		var start = this.pos;
		this.pos++;
		while(this.pos < this.end) {
			var ch = this.text.charCodeAt(this.pos);
			if(!(ch >= 48 && ch <= 57 || (ch == 95 || ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90))) {
				break;
			}
			this.pos++;
		}
		return this.text.substring(start,this.pos);
	}
	,scanInteger: function() {
		var start = this.pos;
		this.pos++;
		while(this.pos < this.end) {
			var ch = this.text.charCodeAt(this.pos);
			if(!(ch >= 48 && ch <= 57)) {
				break;
			}
			this.pos++;
		}
		return this.text.substring(start,this.pos);
	}
	,scanString: function(quoteChar) {
		this.pos++;
		var result = "";
		var start = this.pos;
		while(true) {
			if(this.pos >= this.end) {
				var start1 = null;
				if(start1 == null) {
					start1 = this.tokenStart;
				}
				this.handleError("Unterminated string",new Position(start1,this.pos));
				result += this.text.substring(start,this.pos);
				break;
			}
			var ch = this.text.charCodeAt(this.pos);
			if(ch == quoteChar) {
				result += this.text.substring(start,this.pos);
				this.pos++;
				break;
			} else if(ch == 92) {
				result += this.text.substring(start,this.pos);
				result += this.scanEscapeSequence();
				start = this.pos;
			} else {
				this.pos++;
			}
		}
		return result;
	}
	,scanEscapeSequence: function() {
		this.pos++;
		if(this.pos >= this.end) {
			var start = null;
			if(start == null) {
				start = this.tokenStart;
			}
			this.handleError("Unterminated escape sequence",new Position(start,this.pos));
			return "";
		}
		var ch = this.text.charCodeAt(this.pos);
		this.pos++;
		switch(ch) {
		case 34:
			return "\"";
		case 39:
			return "'";
		case 110:
			return "\n";
		case 114:
			return "\r";
		case 116:
			return "\t";
		default:
			var start1 = null;
			if(start1 == null) {
				start1 = this.tokenStart;
			}
			this.handleError("Invalid escape sequence",new Position(start1,this.pos));
			return "";
		}
	}
	,scanDirective: function() {
		this.pos++;
		if(this.pos >= this.end) {
			var start = null;
			if(start == null) {
				start = this.tokenStart;
			}
			this.handleError("Unterminated directive",new Position(start,this.pos));
			return null;
		}
		var ch = this.text.charCodeAt(this.pos);
		if(ch == 95 || ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90) {
			return this.scanIdent();
		} else {
			var start1 = null;
			if(start1 == null) {
				start1 = this.tokenStart;
			}
			this.handleError("Unterminated directive",new Position(start1,this.pos));
			return null;
		}
	}
	,processDirective: function(id) {
		var kind;
		switch(id) {
		case "else":
			kind = TriviaKind.TrElseDirective;
			break;
		case "elseif":
			kind = TriviaKind.TrElseIfDirective;
			break;
		case "end":
			kind = TriviaKind.TrEndDirective;
			break;
		case "error":
			var msg = null;
			var errorStart = this.tokenStart;
			try {
				while(this.pos < this.end) {
					var ch = this.text.charCodeAt(this.pos);
					switch(ch) {
					case 9:case 10:case 13:case 32:
						this.pos++;
						break;
					case 34:case 39:
						errorStart = this.pos;
						msg = this.scanString(ch);
						throw "__break__";
						break;
					default:
						throw "__break__";
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			var start = errorStart;
			if(start == null) {
				start = this.tokenStart;
			}
			this.handleError(msg == null ? "Not implemented" : msg,new Position(start,this.pos));
			kind = TriviaKind.TrErrorDirective(msg);
			break;
		case "if":
			kind = TriviaKind.TrIfDirective;
			break;
		case "line":
			var line = -1;
			try {
				while(this.pos < this.end) {
					var ch1 = this.text.charCodeAt(this.pos);
					switch(ch1) {
					case 9:case 10:case 13:case 32:
						this.pos++;
						break;
					case 48:
						this.pos++;
						line = 0;
						throw "__break__";
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						line = Std.parseInt(this.scanInteger());
						throw "__break__";
						break;
					default:
						throw "__break__";
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(line == -1) {
				var start1 = null;
				if(start1 == null) {
					start1 = this.tokenStart;
				}
				this.handleError("Unterminated #line directive",new Position(start1,this.pos));
			}
			kind = TriviaKind.TrLineDirective(line);
			break;
		default:
			var start2 = null;
			if(start2 == null) {
				start2 = this.tokenStart;
			}
			this.handleError("Unknown directive: #" + id,new Position(start2,this.pos));
			kind = TriviaKind.TrUnknownDirective;
		}
		return new Trivia(new Position(this.tokenStart,this.pos),kind);
	}
	,scanLineComment: function() {
		this.pos++;
		while(this.pos < this.end) {
			if(this.text.charCodeAt(this.pos) == 13 || this.text.charCodeAt(this.pos) == 10) {
				break;
			}
			this.pos++;
		}
		return new Trivia(new Position(this.tokenStart,this.pos),TriviaKind.TrLineComment);
	}
	,scanBlockComment: function() {
		this.pos++;
		var terminated = false;
		while(this.pos < this.end) {
			if(this.text.charCodeAt(this.pos) == 42 && this.pos + 1 < this.end && this.text.charCodeAt(this.pos + 1) == 47) {
				this.pos += 2;
				terminated = true;
				break;
			}
			this.pos++;
		}
		if(!terminated) {
			var start = null;
			if(start == null) {
				start = this.tokenStart;
			}
			this.handleError("Unterminated block comment",new Position(start,this.pos));
		}
		return new Trivia(new Position(this.tokenStart,this.pos),TriviaKind.TrBlockComment);
	}
	,scanWhitespace: function() {
		this.pos++;
		while(this.pos < this.end) {
			var ch = this.text.charCodeAt(this.pos);
			if(ch != 32 && ch != 9) {
				break;
			}
			this.pos++;
		}
		return new Trivia(new Position(this.tokenStart,this.pos),TriviaKind.TrWhitespace);
	}
	,scanEol: function(ch) {
		this.pos++;
		if(ch == 13 && this.pos < this.end && this.text.charCodeAt(this.pos) == 10) {
			this.pos++;
		}
		return new Trivia(new Position(this.tokenStart,this.pos),TriviaKind.TrEol);
	}
	,scanTrailTrivia: function() {
		var result = null;
		try {
			while(true) {
				this.tokenStart = this.pos;
				if(this.pos >= this.end) {
					throw "__break__";
				}
				var ch = this.text.charCodeAt(this.pos);
				switch(ch) {
				case 10:case 13:
					var t = this.scanEol(ch);
					if(result == null) {
						result = [];
					}
					result.push(t);
					throw "__break__";
					break;
				case 9:case 32:
					var t1 = this.scanWhitespace();
					if(result == null) {
						result = [];
					}
					result.push(t1);
					continue;
					break;
				case 35:
					var directive = this.scanDirective();
					if(directive == null) {
						throw "__break__";
					}
					var t2 = this.processDirective(directive);
					if(result == null) {
						result = [];
					}
					result.push(t2);
					continue;
					break;
				case 47:
					if(this.pos + 1 < this.end) {
						var _g = this.text.charCodeAt(this.pos + 1);
						switch(_g) {
						case 42:
							this.pos++;
							var t3 = this.scanBlockComment();
							if(result == null) {
								result = [];
							}
							result.push(t3);
							continue;
							break;
						case 47:
							this.pos++;
							var t4 = this.scanLineComment();
							if(result == null) {
								result = [];
							}
							result.push(t4);
							continue;
							break;
						default:
						}
					}
					throw "__break__";
					break;
				default:
					throw "__break__";
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return result;
	}
	,isDigit: function(ch) {
		if(ch >= 48) {
			return ch <= 57;
		} else {
			return false;
		}
	}
	,isIdentStart: function(ch) {
		if(!(ch == 95 || ch >= 97 && ch <= 122)) {
			if(ch >= 65) {
				return ch <= 90;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isIdentPart: function(ch) {
		if(!(ch >= 48 && ch <= 57)) {
			if(!(ch == 95 || ch >= 97 && ch <= 122)) {
				if(ch >= 65) {
					return ch <= 90;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return true;
		}
	}
	,mk: function(kind) {
		var token = new Token(new Position(this.tokenStart,this.pos),kind);
		token.leadTrivia = this.trivia;
		token.trailTrivia = this.scanTrailTrivia();
		this.trivia = null;
		return token;
	}
	,mkTrivia: function(kind) {
		return new Trivia(new Position(this.tokenStart,this.pos),kind);
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var Token = function(pos,kind) {
	this.pos = pos;
	this.kind = kind;
};
Token.__name__ = true;
Token.prototype = {
	toString: function() {
		return "" + Std.string(this.kind) + " " + Std.string(this.pos);
	}
};
var TokenKind = { __ename__ : true, __constructs__ : ["TkEof","TkUnknown","TkIdent","TkString","TkInt","TkBraceOpen","TkBraceClose","TkParenOpen","TkParenClose","TkBracketOpen","TkBracketClose","TkLt","TkLtLt","TkLtEquals","TkLtLtEquals","TkGt","TkGtGt","TkGtGtGt","TkGtEquals","TkGtGtEquals","TkGtGtGtEquals","TkColon","TkSemicolon","TkDot","TkDotDotDot","TkComma","TkEquals","TkEqualsEquals","TkEqualsGt","TkPlus","TkPlusPlus","TkPlusEquals","TkMinus","TkMinusMinus","TkMinusEquals","TkMinusGt","TkAsterisk","TkAsteriskEquals","TkSlash","TkSlashEquals","TkTilde","TkCaret","TkCaretEquals","TkExc","TkExcEquals","TkPercent","TkPercentEquals","TkAmp","TkAmpEquals","TkAmpAmp","TkAmpAmpEquals","TkBar","TkBarEquals","TkBarBar","TkBarBarEquals"] };
TokenKind.TkEof = ["TkEof",0];
TokenKind.TkEof.__enum__ = TokenKind;
TokenKind.TkUnknown = ["TkUnknown",1];
TokenKind.TkUnknown.__enum__ = TokenKind;
TokenKind.TkIdent = function(ident) { var $x = ["TkIdent",2,ident]; $x.__enum__ = TokenKind; return $x; };
TokenKind.TkString = function(string) { var $x = ["TkString",3,string]; $x.__enum__ = TokenKind; return $x; };
TokenKind.TkInt = function(value) { var $x = ["TkInt",4,value]; $x.__enum__ = TokenKind; return $x; };
TokenKind.TkBraceOpen = ["TkBraceOpen",5];
TokenKind.TkBraceOpen.__enum__ = TokenKind;
TokenKind.TkBraceClose = ["TkBraceClose",6];
TokenKind.TkBraceClose.__enum__ = TokenKind;
TokenKind.TkParenOpen = ["TkParenOpen",7];
TokenKind.TkParenOpen.__enum__ = TokenKind;
TokenKind.TkParenClose = ["TkParenClose",8];
TokenKind.TkParenClose.__enum__ = TokenKind;
TokenKind.TkBracketOpen = ["TkBracketOpen",9];
TokenKind.TkBracketOpen.__enum__ = TokenKind;
TokenKind.TkBracketClose = ["TkBracketClose",10];
TokenKind.TkBracketClose.__enum__ = TokenKind;
TokenKind.TkLt = ["TkLt",11];
TokenKind.TkLt.__enum__ = TokenKind;
TokenKind.TkLtLt = ["TkLtLt",12];
TokenKind.TkLtLt.__enum__ = TokenKind;
TokenKind.TkLtEquals = ["TkLtEquals",13];
TokenKind.TkLtEquals.__enum__ = TokenKind;
TokenKind.TkLtLtEquals = ["TkLtLtEquals",14];
TokenKind.TkLtLtEquals.__enum__ = TokenKind;
TokenKind.TkGt = ["TkGt",15];
TokenKind.TkGt.__enum__ = TokenKind;
TokenKind.TkGtGt = ["TkGtGt",16];
TokenKind.TkGtGt.__enum__ = TokenKind;
TokenKind.TkGtGtGt = ["TkGtGtGt",17];
TokenKind.TkGtGtGt.__enum__ = TokenKind;
TokenKind.TkGtEquals = ["TkGtEquals",18];
TokenKind.TkGtEquals.__enum__ = TokenKind;
TokenKind.TkGtGtEquals = ["TkGtGtEquals",19];
TokenKind.TkGtGtEquals.__enum__ = TokenKind;
TokenKind.TkGtGtGtEquals = ["TkGtGtGtEquals",20];
TokenKind.TkGtGtGtEquals.__enum__ = TokenKind;
TokenKind.TkColon = ["TkColon",21];
TokenKind.TkColon.__enum__ = TokenKind;
TokenKind.TkSemicolon = ["TkSemicolon",22];
TokenKind.TkSemicolon.__enum__ = TokenKind;
TokenKind.TkDot = ["TkDot",23];
TokenKind.TkDot.__enum__ = TokenKind;
TokenKind.TkDotDotDot = ["TkDotDotDot",24];
TokenKind.TkDotDotDot.__enum__ = TokenKind;
TokenKind.TkComma = ["TkComma",25];
TokenKind.TkComma.__enum__ = TokenKind;
TokenKind.TkEquals = ["TkEquals",26];
TokenKind.TkEquals.__enum__ = TokenKind;
TokenKind.TkEqualsEquals = ["TkEqualsEquals",27];
TokenKind.TkEqualsEquals.__enum__ = TokenKind;
TokenKind.TkEqualsGt = ["TkEqualsGt",28];
TokenKind.TkEqualsGt.__enum__ = TokenKind;
TokenKind.TkPlus = ["TkPlus",29];
TokenKind.TkPlus.__enum__ = TokenKind;
TokenKind.TkPlusPlus = ["TkPlusPlus",30];
TokenKind.TkPlusPlus.__enum__ = TokenKind;
TokenKind.TkPlusEquals = ["TkPlusEquals",31];
TokenKind.TkPlusEquals.__enum__ = TokenKind;
TokenKind.TkMinus = ["TkMinus",32];
TokenKind.TkMinus.__enum__ = TokenKind;
TokenKind.TkMinusMinus = ["TkMinusMinus",33];
TokenKind.TkMinusMinus.__enum__ = TokenKind;
TokenKind.TkMinusEquals = ["TkMinusEquals",34];
TokenKind.TkMinusEquals.__enum__ = TokenKind;
TokenKind.TkMinusGt = ["TkMinusGt",35];
TokenKind.TkMinusGt.__enum__ = TokenKind;
TokenKind.TkAsterisk = ["TkAsterisk",36];
TokenKind.TkAsterisk.__enum__ = TokenKind;
TokenKind.TkAsteriskEquals = ["TkAsteriskEquals",37];
TokenKind.TkAsteriskEquals.__enum__ = TokenKind;
TokenKind.TkSlash = ["TkSlash",38];
TokenKind.TkSlash.__enum__ = TokenKind;
TokenKind.TkSlashEquals = ["TkSlashEquals",39];
TokenKind.TkSlashEquals.__enum__ = TokenKind;
TokenKind.TkTilde = ["TkTilde",40];
TokenKind.TkTilde.__enum__ = TokenKind;
TokenKind.TkCaret = ["TkCaret",41];
TokenKind.TkCaret.__enum__ = TokenKind;
TokenKind.TkCaretEquals = ["TkCaretEquals",42];
TokenKind.TkCaretEquals.__enum__ = TokenKind;
TokenKind.TkExc = ["TkExc",43];
TokenKind.TkExc.__enum__ = TokenKind;
TokenKind.TkExcEquals = ["TkExcEquals",44];
TokenKind.TkExcEquals.__enum__ = TokenKind;
TokenKind.TkPercent = ["TkPercent",45];
TokenKind.TkPercent.__enum__ = TokenKind;
TokenKind.TkPercentEquals = ["TkPercentEquals",46];
TokenKind.TkPercentEquals.__enum__ = TokenKind;
TokenKind.TkAmp = ["TkAmp",47];
TokenKind.TkAmp.__enum__ = TokenKind;
TokenKind.TkAmpEquals = ["TkAmpEquals",48];
TokenKind.TkAmpEquals.__enum__ = TokenKind;
TokenKind.TkAmpAmp = ["TkAmpAmp",49];
TokenKind.TkAmpAmp.__enum__ = TokenKind;
TokenKind.TkAmpAmpEquals = ["TkAmpAmpEquals",50];
TokenKind.TkAmpAmpEquals.__enum__ = TokenKind;
TokenKind.TkBar = ["TkBar",51];
TokenKind.TkBar.__enum__ = TokenKind;
TokenKind.TkBarEquals = ["TkBarEquals",52];
TokenKind.TkBarEquals.__enum__ = TokenKind;
TokenKind.TkBarBar = ["TkBarBar",53];
TokenKind.TkBarBar.__enum__ = TokenKind;
TokenKind.TkBarBarEquals = ["TkBarBarEquals",54];
TokenKind.TkBarBarEquals.__enum__ = TokenKind;
var Trivia = function(pos,kind) {
	this.pos = pos;
	this.kind = kind;
};
Trivia.__name__ = true;
Trivia.prototype = {
	toString: function() {
		return "" + Std.string(this.kind) + " " + Std.string(this.pos);
	}
};
var TriviaKind = { __ename__ : true, __constructs__ : ["TrWhitespace","TrEol","TrLineComment","TrBlockComment","TrIfDirective","TrDisabledText","TrElseDirective","TrElseIfDirective","TrEndDirective","TrErrorDirective","TrLineDirective","TrUnknownDirective"] };
TriviaKind.TrWhitespace = ["TrWhitespace",0];
TriviaKind.TrWhitespace.__enum__ = TriviaKind;
TriviaKind.TrEol = ["TrEol",1];
TriviaKind.TrEol.__enum__ = TriviaKind;
TriviaKind.TrLineComment = ["TrLineComment",2];
TriviaKind.TrLineComment.__enum__ = TriviaKind;
TriviaKind.TrBlockComment = ["TrBlockComment",3];
TriviaKind.TrBlockComment.__enum__ = TriviaKind;
TriviaKind.TrIfDirective = ["TrIfDirective",4];
TriviaKind.TrIfDirective.__enum__ = TriviaKind;
TriviaKind.TrDisabledText = ["TrDisabledText",5];
TriviaKind.TrDisabledText.__enum__ = TriviaKind;
TriviaKind.TrElseDirective = ["TrElseDirective",6];
TriviaKind.TrElseDirective.__enum__ = TriviaKind;
TriviaKind.TrElseIfDirective = ["TrElseIfDirective",7];
TriviaKind.TrElseIfDirective.__enum__ = TriviaKind;
TriviaKind.TrEndDirective = ["TrEndDirective",8];
TriviaKind.TrEndDirective.__enum__ = TriviaKind;
TriviaKind.TrErrorDirective = function(error) { var $x = ["TrErrorDirective",9,error]; $x.__enum__ = TriviaKind; return $x; };
TriviaKind.TrLineDirective = function(line) { var $x = ["TrLineDirective",10,line]; $x.__enum__ = TriviaKind; return $x; };
TriviaKind.TrUnknownDirective = ["TrUnknownDirective",11];
TriviaKind.TrUnknownDirective.__enum__ = TriviaKind;
var Web = function() { };
Web.__name__ = true;
Web.main = function() {
	var code = window.document.getElementById("code");
	var tree = window.document.getElementById("tree");
	var error = window.document.getElementById("errors");
	var update = function() {
		var errors = [];
		var scanner = new Scanner(code.value);
		scanner.handleError = function(text,pos) {
			errors.push("" + text + " <span class=\"pos\">" + Std.string(pos) + "</span>");
		};
		var tokens = [];
		var token;
		while(true) {
			token = scanner.scan();
			tokens.push("<span class=\"token" + (token.kind == TokenKind.TkUnknown ? " token-unknown" : "") + "\">" + Std.string(token.kind) + " <span class=\"pos\">" + Std.string(token.pos) + "</span></span>");
			if(token.leadTrivia != null) {
				tokens.push("  Lead trivia:");
				var _g = 0;
				var _g1 = token.leadTrivia;
				while(_g < _g1.length) {
					var trivia = _g1[_g];
					++_g;
					tokens.push("    <span class=\"trivia\">" + Std.string(trivia.kind) + " <span class=\"pos\">" + Std.string(trivia.pos) + "</span></span>");
				}
			}
			if(token.trailTrivia != null) {
				tokens.push("  Trail trivia:");
				var _g2 = 0;
				var _g11 = token.trailTrivia;
				while(_g2 < _g11.length) {
					var trivia1 = _g11[_g2];
					++_g2;
					tokens.push("    <span class=\"trivia\">" + Std.string(trivia1.kind) + " <span class=\"pos\">" + Std.string(trivia1.pos) + "</span></span>");
				}
			}
			if(!(token.kind != TokenKind.TkEof)) {
				break;
			}
		}
		tree.innerHTML = tokens.join("\n");
		error.innerHTML = errors.join("\n");
	};
	code.oninput = update;
	update();
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
Web.main();
})();
